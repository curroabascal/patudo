require(Robserve)
library(help='Robserve')
?observe_catch
dat=observe_catch(ocean='Atlantic',years=2017:2023)
head(dat)
# options(java.parameters = c("-XX:+UseConcMarkSweepGC", "-Xmx8192m"))
options(java.parameters = c("-XX:+UseConcMarkSweepGC", "-Xmx12192m"))
beep <- function(n = 3){
for(i in seq(n)){
system("rundll32 user32.dll,MessageBeep -1")
Sys.sleep(.5)
}
}
# # install.packages(c('quantstrat','quantmod','TTR'))
# install.packages("FinancialInstrument") #if not installed
# install.packages("PerformanceAnalytics") #if not installed
#
# # next install blotter from GitHub
# devtools::install_github("braverock/blotter")
# # next install quantstrat from GitHub
# devtools::install_github("braverock/quantstrat")
#
# require(quantstrat)
require(quantmod)
require(TTR)
ibex35tickers=c("MRL.MC", "ENG.MC", "SAN.MC", "ACS.MC", "MAP.MC", "BBVA.MC", "BKT.MC", "VIS.MC", "ACX.MC", "NTGY.MC", "COL.MC", "CABK.MC", "ITX.MC", "AENA.MC", "TEF.MC", "IBE.MC", "ELE.MC", "SAB.MC", "CLNX.MC", "ANA.MC", "IAG.MC", "FER.MC", "MTS.MC", "AMS.MC", "MEL.MC", "PHM.MC", "FDR.MC")
# ibex35tickers=c("FER.MC", "MTS.MC", "AMS.MC", "MEL.MC", "PHM.MC", "FDR.MC")
res=sapply(ibex35tickers,function(x){
jnk<-getSymbols(x,src="yahoo",auto.assign=F)
jnk<-na.locf(jnk)
jnk
})
addEMAs<-function(stock,vals=seq(10,26,2)){
jnk=list()
dummy=try(sapply(1:length(vals),function(x){jnk[[x]]<<-EMA(stock[,6],vals[x])}),silent=T)
jnk=do.call(cbind, lapply(jnk, as.data.frame))
names(jnk)<-paste0('EMA',vals)
jnk=as.xts(jnk,tz='UTC')
index(jnk)<-index(stock)
stock=merge(stock,jnk)
stock
}
addSMAs<-function(stock,vals=seq(10,26,2)){
jnk=list()
dummy=try(sapply(1:length(vals),function(x){jnk[[x]]<<-SMA(stock[,6],vals[x])}),silent=T)
jnk=do.call(cbind, lapply(jnk, as.data.frame))
names(jnk)<-paste0('SMA',vals)
jnk=as.xts(jnk,tz='UTC')
index(jnk)<-index(stock)
stock=merge(stock,jnk)
stock
}
addEWMAs<-function(stock,vals=seq(10,26,2)){
jnk=list()
dummy=try(sapply(1:length(vals),function(x){jnk[[x]]<<-EVWMA(stock[,6],stock[,5],vals[x])}),silent=T)
jnk=do.call(cbind, lapply(jnk, as.data.frame))
names(jnk)<-paste0('EWMA',vals)
jnk=as.xts(jnk,tz='UTC')
index(jnk)<-index(stock)
stock=merge(stock,jnk)
stock
}
addprofit<-function(stock,gap=30){
jnk=c(as.numeric(stock[(gap+1):nrow(stock),6]),rep(NA,gap))
stock$profit=jnk
stock$profit=(stock$profit-stock[,ncol(stock)-1])/stock[,ncol(stock)-1]
stock
}
addprofit<-function(stock,gap=30){
jnkdates=index(stock)
kk=sapply(1:nrow(stock),function(x){which.min(abs((jnkdates[x]+gap)-jnkdates))})
jnk=c(as.numeric(stock[kk[1:(length(kk)-gap)],6]),rep(NA,gap))
stock$profit=jnk
stock$profit=round((stock$profit-stock[,6])/stock[,6],2)
stock
}
head(res[[1]])
jnk<-lapply(res,function(x){addEWMAs(x,c(5,10,15,20,25,30,35,40,60,70,80,90,100,110,120,130,140,150))})
jnk<-lapply(jnk,function(x){addSMAs(x,c(5,10,15,20,25,30,35,40,60,70,80,90,100,110,120,130,140,150))})
jnk<-lapply(jnk,function(x){addEMAs(x,c(5,10,15,20,25,30,35,40,60,70,80,90,100,110,120,130,140,150))})
jnk=lapply(jnk,function(x){addprofit(x)})
kk=jnk[[1]]
head(kk)
addprofit<-function(stock,gap=30){
jnkdates=index(stock)
kk=sapply(1:nrow(stock),function(x){which.min(abs((jnkdates[x]+gap)-jnkdates))})
jnk=c(as.numeric(stock[kk[1:(length(kk)-gap)],6]),rep(NA,gap))
stock$profit=jnk
stock$profit=(stock$profit-stock[,6])/stock[,6]
stock
}
jnk<-lapply(res,function(x){addEWMAs(x,c(5,10,15,20,25,30,35,40,60,70,80,90,100,110,120,130,140,150))})
jnk<-lapply(jnk,function(x){addSMAs(x,c(5,10,15,20,25,30,35,40,60,70,80,90,100,110,120,130,140,150))})
jnk<-lapply(jnk,function(x){addEMAs(x,c(5,10,15,20,25,30,35,40,60,70,80,90,100,110,120,130,140,150))})
jnk=lapply(jnk,function(x){addprofit(x)})
install.packages('XGboost')
install.packages('xgboost')
library(help='xgboost')
dens
faocode=c('SKJ','SKJ','SKJ','SKJ','YFT','YFT','YFT','TOT','TOT','SWO','SWO')
londec=c(-20,-22.5,-22.5,160,-15,5,0,-42,-21,-18.3,-24.6)
latdec=c(-15,25,25,-85,-22,-40,-13,15,-15,45,-30)
require(sf)
res<-data.frame(nrec=1:length(faocode),area=rep(NA,length(faocode)),stock=rep(NA,length(faocode)))
data(speciesandlayers)
layers<-system.file("extdata", "ICCAT_gis.gpkg", package = "iccatareas")
notinlist=unique(faocode[!faocode %in% unique(speciesandlayers$Species)])
sp='SWO'
require(iccatareas)
require(sf)
res<-data.frame(nrec=1:length(faocode),area=rep(NA,length(faocode)),stock=rep(NA,length(faocode)))
data(speciesandlayers)
layers<-system.file("extdata", "ICCAT_gis.gpkg", package = "iccatareas")
notinlist=unique(faocode[!faocode %in% unique(speciesandlayers$Species)])
if (length(notinlist)>0){
cat(paste('Species',paste(notinlist,collapse=";"),"not in the list of ICCAT areas. Layer for \"Others\" will be used"))
faocode[faocode %in% notinlist]='OTH'
}
pnts <- data.frame(x=londec,y=latdec)
sp='SWO'
print(sp)
arealayer<-st_read(layers,layer=speciesandlayers$sampling_area[match(sp,speciesandlayers$Species)])
pnts_sf <- st_as_sf(pnts, coords = c('x', 'y'),crs=st_crs(arealayer))
sf_use_s2(FALSE)
areas=st_intersects(pnts_sf[faocode==sp,],arealayer)
#Check only one area per point
areaslengths=unlist(lapply(areas,length))
noarea=which(areaslengths==0)
if (length(noarea)>0){
print(paste('Points',paste(res$nrec[faocode==sp][noarea],collapse=";"),'do not fall in any of the areas'))
areas[[noarea]]=NA
}
twoareas=which(areaslengths>1)
if (length(twoareas)>0){
print(paste('Points',paste(res$nrec[faocode==sp][twoareas],collapse=";"),'fall in more than one area- likely just in the border between two. Only the first one is assigned'))
dummy=sapply(twoareas,function(x){areas[[x]]<<- areas[[x]][1]})
}
areas=unlist(areas)
res$area[faocode==sp]=arealayer$CODE[areas]
sp %in% c('BUM','WHM','SAI','SPF','SWO')
data.frame(arealayer[paste0('stock_',sp)][areas])
data.frame(arealayer[paste0('stock_',sp),][areas])
sp
sp
data.frame(arealayer[areas,paste0('stock_',sp)])
data.frame(arealayer[areas,5])
names(arealayer)
names(arealayer)
data.frame(arealayer[areas,10])
data.frame(arealayer[areas,10][1,])
data.frame(arealayer[areas,10][,1])
class(data.frame(arealayer[areas,10][,1]))
kk=data.frame(arealayer[areas,10][,1])
dim(kk)
kk[,1]
kk=data.frame(arealayer[areas,10])
dim(kk)
kk=data.frame(arealayer[areas,10])[,1]
kk
kk=data.frame(arealayer[areas,paste0('stock_',sp)])[,1]
kk
res$stock[faocode==sp]=data.frame(arealayer[areas,paste0('stock_',sp)])[,1]
res
getICCATareas<-function(faocode,londec,latdec){
require(sf)
res<-data.frame(nrec=1:length(faocode),area=rep(NA,length(faocode)),stock=rep(NA,length(faocode)))
data(speciesandlayers)
layers<-system.file("extdata", "ICCAT_gis.gpkg", package = "iccatareas")
notinlist=unique(faocode[!faocode %in% unique(speciesandlayers$Species)])
if (length(notinlist)>0){
cat(paste('Species',paste(notinlist,collapse=";"),"not in the list of ICCAT areas. Layer for \"Others\" will be used"))
faocode[faocode %in% notinlist]='OTH'
}
pnts <- data.frame(x=londec,y=latdec)
for (sp in unique(faocode)){
print(sp)
arealayer<-st_read(layers,layer=speciesandlayers$sampling_area[match(sp,speciesandlayers$Species)])
pnts_sf <- st_as_sf(pnts, coords = c('x', 'y'),crs=st_crs(arealayer))
sf_use_s2(FALSE)
areas=st_intersects(pnts_sf[faocode==sp,],arealayer)
#Check only one area per point
areaslengths=unlist(lapply(areas,length))
noarea=which(areaslengths==0)
if (length(noarea)>0){
print(paste('Points',paste(res$nrec[faocode==sp][noarea],collapse=";"),'do not fall in any of the areas'))
areas[[noarea]]=NA
}
twoareas=which(areaslengths>1)
if (length(twoareas)>0){
print(paste('Points',paste(res$nrec[faocode==sp][twoareas],collapse=";"),'fall in more than one area- likely just in the border between two. Only the first one is assigned'))
dummy=sapply(twoareas,function(x){areas[[x]]<<- areas[[x]][1]})
}
areas=unlist(areas)
res$area[faocode==sp]=arealayer$CODE[areas]
if (sp %in% c('BUM','WHM','SAI','SPF','SWO')){
# arealayer$stock=arealayer[paste0('stock_',sp)]
# eval(paste0("res$stock[faocode==sp]=arealayer$",paste0('stock_',sp),"[areas]"))
# res$stock[faocode==sp]=arealayer[paste0('stock_',sp)][areas]
res$stock[faocode==sp]=data.frame(arealayer[areas,paste0('stock_',sp)])[,1]
} else if(sp=='OTH'){
res$stock[faocode==sp]=arealayer$stock_oth[areas]
} else {
res$stock[faocode==sp]=arealayer$stock[areas]
}
}
return(cbind(res$area,res$stock))
}
getICCATareas(faocode=c('SKJ','SKJ','SKJ','SKJ','YFT','YFT','YFT','TOT','TOT','SWO','SWO'),
londec=c(-20,-22.5,-22.5,160,-15,5,0,-42,-21,-18.3,-24.6),
latdec=c(-15,25,25,-85,-22,-40,-13,15,-15,45,-30))
remove.packages('iccatareas')
remove.packages('iccatareas')
require(devtools)
apropos('github')
?install_github
devtools::install_github('curroabascal/iccatareas')
remotes::install_github('curroabascal/iccatareas')
remotes::install_github('curroabascal/iccatareas',ref='master')
require(iccatareas)
?getICCATareas
getICCATareas(faocode=c('SKJ','SKJ','SKJ','SKJ','YFT','YFT','YFT','TOT','TOT','SWO','SWO'),
londec=c(-20,-22.5,-22.5,160,-15,5,0,-42,-21,-18.3,-24.6),
latdec=c(-15,25,25,-85,-22,-40,-13,15,-15,45,-30))
remove.packages('iccatareas')
devtools::install_github('curroabascal/iccatareas')
devtools::install_github('curroabascal/iccatareas', ref = "master")
require(iccatareas)
getICCATareas(faocode=c('SKJ','SKJ','SKJ','SKJ','YFT','YFT','YFT','TOT','TOT','SWO','SWO'),
londec=c(-20,-22.5,-22.5,160,200,150,200,-15,5,0,-42,-21,-18.3,-24.6),
latdec=c(-15,25,25,-85,-90,-90,-90,-22,-40,-13,15,-15,45,-30))
londec=c(-20,-22.5,-22.5,160,200,150,200,-15,5,0,-42,-21,-18.3,-24.6)
latdec=c(-15,25,25,-85,-90,-90,-90,-22,-40,-13,15,-15,45,-30)
length(londec)
length(latdec)
require(iccatareas)
getICCATareas(faocode=c('SKJ','SKJ','SKJ','SKJ','YFT','YFT','YFT','TOT','TOT','SWO','SWO'),
londec=c(-20,-22.5,-22.5,160,200,150,200,-15,5,0,-42,-21,-18.3,-24.6),
latdec=c(-15,25,25,-85,-90,-90,-90,-22,-40,-13,15,-15,45,-30))
remove.packages('iccatareas')
require(iccatareas)
getICCATareas(faocode=c('SKJ','SKJ','SKJ','SKJ','YFT','YFT','YFT','TOT','TOT','SWO','SWO'),
londec=c(-20,-22.5,-22.5,160,200,150,200,-15,5,0,-42,-21,-18.3,-24.6),
latdec=c(-15,25,25,-85,-90,-90,-90,-22,-40,-13,15,-15,45,-30))
remove.packages('iccatareas')
require(iccatareas)
devtools::install_github('curroabascal/iccatareas')
require(iccatareas)
getICCATareas(faocode=c('SKJ','SKJ','SKJ','SKJ','YFT','YFT','YFT','TOT','TOT','SWO','SWO'),
londec=c(-20,-22.5,-22.5,160,200,150,200,-15,5,0,-42,-21,-18.3,-24.6),
latdec=c(-15,25,25,-85,-90,-90,-90,-22,-40,-13,15,-15,45,-30))
edit(getICCATareas)
faocode=c('SKJ','SKJ','SKJ','SKJ','YFT','YFT','YFT','TOT','TOT','SWO','SWO')
londec=c(-20,-22.5,-22.5,160,200,150,200,-15,5,0,-42,-21,-18.3,-24.6)
latdec=c(-15,25,25,-85,-90,-90,-90,-22,-40,-13,15,-15,45,-30)
length(faocode)
length(londec)
getICCATareas(faocode=c('SKJ','SKJ','SKJ','SKJ','SKJ','SKJ','SKJ','YFT','YFT','YFT','TOT','TOT','SWO','SWO'),
londec=c(-20,-22.5,-22.5,160,200,150,200,-15,5,0,-42,-21,-18.3,-24.6),
latdec=c(-15,25,25,-85,-90,-90,-90,-22,-40,-13,15,-15,45,-30))
remove.packages('eezareas')
devtools::install_github('curroabascal/eezareas',ref='master',force=T)
require(eezareas)
get.EEZ(londec=c(-18,12.588,13.218,16,-15,5,0,-42,-21,-18.3,-24.6,-18),
latdec=c(22,-11.2237,-22.99078,-85,-22,-40,-13,15,-15,45,-30,28),type='country')
get.EEZ(londec=c(-18,12.588,13.218,16,-15,5,0,-42,-21,-18.3,-24.6,-18),
latdec=c(22,-11.2237,-22.99078,-85,-22,-40,-13,15,-15,45,-30,28),type='country')
library(help='eezareas
')
library(help='eezareas')
devtools::install_version("maptools", version = "1.1-8")
searchtextinRfiles<-function(path,pattern){
res=NULL
#Get list of R files in the path
rfiles=dir(path,pattern='\\.r$|\\.R$',recursive = T,full.names = T)
# length(rfiles)
for (i in rfiles){
tt=readLines(i,encoding = 'ISO-8859-1')
tt=iconv(tt, from="UTF-8", to="UTF-8", sub="NA")
coincidences=grep(tolower(pattern),tolower(tt))
if (length(coincidences)>0){
res=rbind(res,data.frame(file=i,coincidences=paste('Lines:',paste(coincidences,collapse=','))))
}
}
return(res)
}
file.choose()
searchtextinRfiles( "C:\\Users\\curro\\Nextcloud\\Documents\\2025 Hampton\\withpackage\\","maptools")
(!'maptools' %in% installed.packages()[,1])
rm(list=ls())
remove.packages(patudo)
remove.packages('patudo')
################################################################################################################
# 1.- Installs a library with support functions and data from the tags used in the 2018 paper.
################################################################################################################
#There is a lot to download (it includes a dataset with all of the archived data information),
#so it might take some time
if (!'patudo' %in% installed.packages()[,1]){
devtools::install_github('curroabascal/patudo')
}
#Load library
require(patudo)
data(archives)
remove.packages('patudo')
path <- rstudioapi::getActiveDocumentContext()$path
Encoding(path) <- "UTF-8"
setwd(dirname(path))
rm(list=ls())
packages=c('installr','roxygen2','devtools','usethis')
sapply(packages,function(x) {if (!x %in% installed.packages()) install.packages(x)})
lapply(packages, require, character.only=T)
setwd('./patudo') #Lo hago en esta carpeta, porque elimino algunas funciones,
#Thermalstructure
load('./output/data/thermalstructure/thermstruct.RData')
dir()
path <- rstudioapi::getActiveDocumentContext()$path
Encoding(path) <- "UTF-8"
setwd(dirname(path))
rm(list=ls())
packages=c('installr','roxygen2','devtools','usethis')
sapply(packages,function(x) {if (!x %in% installed.packages()) install.packages(x)})
lapply(packages, require, character.only=T)
getd()
getdw()
getwd()
#Thermalstructure
load('./output/data/thermalstructure/thermstruct.RData')
save(thermstruct,file='./patudo/data/thermstruct.RData')
setwd('./patudo') #Lo hago en esta carpeta, porque elimino algunas funciones,
document()
################################################################################################################
# 1.- Installs a library with support functions and data from the tags used in the 2018 paper.
################################################################################################################
#There is a lot to download (it includes a dataset with all of the archived data information),
#so it might take some time
if (!'patudo' %in% installed.packages()[,1]){
devtools::install_github('curroabascal/patudo')
}
remove.packages(patudo)
remove.packages('patudo')
rm(list=ls())
